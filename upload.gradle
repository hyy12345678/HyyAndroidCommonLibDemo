import org.gradle.api.internal.artifacts.publish.DefaultPublishArtifact

apply plugin: 'maven'
apply plugin: 'signing'

group "com.hyy.android.common"



//def gitUploadUrl = "http://127.0.0.1:9090/nexus/content/repositories/thirdparty/"
def gitUploadUrl = "http://hyy12345678.uicp.net:8081/nexus/content/repositories/thirdparty/"

def withXmlOwn = {
    String productFlavorCompile,
    String buildTypeCompile,
    String customCompile,
    XmlProvider provider ->
        if (!isCompile) {
            return
        }
        def dependenciesNode = provider.asNode().appendNode('dependencies')
        def configurationNames = new HashSet<String>()
        configurationNames.add("compile")

        if (null != productFlavorCompile && !productFlavorCompile.isEmpty())
            configurationNames.add(productFlavorCompile + "Compile")

        if (null != buildTypeCompile && !buildTypeCompile.isEmpty())
            configurationNames.add(buildTypeCompile + "Compile")

        if (null != customCompile && !customCompile.isEmpty())
            configurationNames.add(customCompile + "Compile")

        configurationNames.each { configurationName ->
            configurations[configurationName].allDependencies.each { it ->
                if (it.group != null && it.name != null) {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    if (it.excludeRules.size() > 0) {
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        it.excludeRules.each { rule ->
                            def exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group)
                            exclusionNode.appendNode('artifactId', rule.module)
                        }
                    }
                }
            }
        }
}

android {



//    publishNonDefault true

//    libraryVariants.all { variant ->
//
//        def mergedCode = variant.mergedFlavor.versionCode;
//        def mergedName = variant.mergedFlavor.versionName;
//        variant.mergedFlavor.versionCode = mergedCode
//        variant.mergedFlavor.versionName = mergedName
//        variant.outputs.each { output ->
//            def outputFile = output.outputFile
//            if (outputFile != null && outputFile.name.endsWith('.aar')) {
//                def fileName = versionCtrl + "-" + variant.name + ".aar"
//                output.outputFile = new File(outputFile.parent, fileName)
//            }
//        }
//    }

}

artifacts {
    android.libraryVariants.all { variant ->
        archives new DefaultPublishArtifact(variant.name, "aar", "aar", null, new Date(), new File("${buildDir}/outputs/aar", versionCtrl + "-" + variant.name + ".aar"))
    }
}

signing {
//    sign configurations.archives
}

uploadArchives {
    configuration = configurations.archives
    repositories {
        mavenDeployer {

            //为Pom文件做数字签名
//            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: gitUploadUrl) {
//                authentication(userName: "admin", password: "admin123")
                authentication(userName: mvnusername, password:mvnpassword)
            }

            android.libraryVariants.all { variant ->
                addFilter(variant.name) { artifact, file ->
                    artifact.name == variant.name
                }
                pom(variant.name) {
                    artifactId = "release"== variant.buildType.name ? versionCtrl : versionCtrl + "-" + variant.buildType.name
                    packaging = "aar"
                    version = variant.mergedFlavor.versionName
                    withXml {
                        provider ->
                            withXmlOwn(variant.flavorName, variant.buildType.name, variant.name, provider)
                    }
                }
            }
        }
    }
}